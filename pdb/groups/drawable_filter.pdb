# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


sub drawable_filter_id_is_valid {
    $blurb = 'Returns %TRUE if the drawable filter ID is valid.';

    $help = <<'HELP';
This procedure checks if the given drawable filter ID is valid and refers to an
existing filter.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
        { name => 'filter_id', type => 'int32',
          desc => 'The filter ID to check' }
    );

    @outargs = (
        { name => 'valid', type => 'boolean',
          desc => 'Whether the filter ID is valid' }
    );

    %invoke = (
        code => <<'CODE'
{
  valid = (gimp_drawable_filter_get_by_id (gimp, filter_id) != NULL);
}
CODE
    );
}

sub drawable_filter_get_name {
    $blurb = 'Get a drawable filter\'s name.';

    $help = <<'HELP';
This procedure returns the specified filter's name.

Since it is not possible to set a drawable filter's name yet, this will
be the operation's name. Eventually this filter's name will be a free
form field so do not rely on this information for any processing.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter whose name you want' }
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => "The filter's name" }
    );

    %invoke = (
	code => <<'CODE'
{
  name = g_strdup (gimp_object_get_name (GIMP_OBJECT (filter)));
}
CODE
    );
}

sub drawable_filter_get_operation_name {
    $blurb = 'Get a drawable filter\'s operation name.';

    $help = <<'HELP';
This procedure returns the specified filter's operation name.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter whose operation name you want' }
    );

    @outargs = (
	{ name => 'name', type => 'string',
	  desc => "The filter's operation name" }
    );

    %invoke = (
	code => <<'CODE'
{
  GeglNode *node;

  node = gimp_drawable_filter_get_operation (filter);
  name = g_strdup (gegl_node_get_operation (node));
}
CODE
    );
}

sub drawable_filter_get_visible {
    $blurb = "Get the visibility of the specified filter.";

    $help = "This procedure returns the specified filter's visibility.";

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter' }
    );

    @outargs = (
	{ name => 'visible', type => 'boolean',
	  desc => "The filter visibility" }
    );

    %invoke = (
	code => <<'CODE'
{
  visible = gimp_filter_get_active (GIMP_FILTER (filter));
}
CODE
    );
}

sub drawable_filter_set_visible {
    $blurb = "Set the visibility of the specified filter.";

    $help = <<'HELP';
This procedure sets the specified filter's visibility.

The drawable won't be immediately rendered. Use [method@Gimp.Drawable.update] to trigger an update.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter' },
	{ name => 'visible', type => 'boolean',
	  desc => "The new filter visibility" }
    );

    %invoke = (
	code => <<'CODE'
{
  gimp_filter_set_active (GIMP_FILTER (filter), visible);
}
CODE
    );
}

sub drawable_filter_update_settings {
    $blurb = "Update the settings of the specified filter.";

    $help = <<'HELP';
This procedure updates the settings of the specified filter all at once.

In particular, update will be frozen and will happen only once for all changed settings.
HELP

    &jehan_pdb_misc('2024', '3.0');

    $lib_private = 1;

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter' },
	{ name => 'propnames', type => 'strv',
	  desc => 'Array of property names' },
	{ name => 'propvalues', type => 'valuearray',
	  desc => 'Array of values, one per property in propnames' },
    );

    %invoke = (
	code => <<'CODE'
{
  success = gimp_drawable_filter_update (filter, propnames, propvalues, error);
}
CODE
    );
}

sub drawable_filter_get_number_arguments {
    $blurb = <<'BLURB';
Queries for the number of arguments on the specified filter.
BLURB

    $help = <<'HELP';
This procedure returns the number of arguments on the specified filter.

For specific information on each input argument, use gimp_drawable_filter_get_argument().
HELP

    &jehan_pdb_misc('2024', '3.0');

    $lib_private = 1;

    @inargs = (
	{ name  => 'operation_name', type  => 'string', non_empty => 1,
	  desc  => 'The procedure name' }
    );

    @outargs = (
        { name => 'num_args', type => 'int32',
	  desc => 'The number of input arguments' },
    );

    %invoke = (
	code => <<'CODE'
{
  if (gegl_has_operation (operation_name))
    {
      guint n_properties;

      g_free (gegl_operation_list_properties (operation_name, &n_properties));
      num_args = (gint) n_properties;
    }
  else
    {
      success = FALSE;
    }
}
CODE
    );
}

sub drawable_filter_get_argument {
    $blurb = <<BLURB;
Queries for information on the specified filter's argument.
BLURB

    $help = <<HELP;
This procedure returns the #GParamSpec of filter's argument.
HELP

    &jehan_pdb_misc('2024', '3.0');

    $lib_private = 1;

    @inargs = (
	{ name => 'operation_name', type  => 'string', non_empty => 1,
	  desc => 'The procedure name' },
	{ name => 'arg_num', type => 'int32',
	  desc => 'The argument number' }
    );

    @outargs = (
	{ name => 'param_spec', type => 'param',
	  desc => "The GParamSpec of the argument" }
    );

   %invoke = (
	code => <<CODE
{
  if (gegl_has_operation (operation_name))
    {
      GParamSpec **specs;
      guint        n_properties;

      specs = gegl_operation_list_properties (operation_name, &n_properties);

      if (arg_num >= 0 && arg_num < n_properties)
        {
          param_spec = g_param_spec_ref (specs[arg_num]);
        }
      else
        {
          success = FALSE;
        }

      g_free (specs);
    }
  else
    {
      success = FALSE;
    }
}
CODE
   );
}

sub drawable_filter_delete {
    $blurb = 'Delete a drawable filter.';

    $help = <<'HELP';
This procedure deletes the specified filter. This must not be done if the
drawable whose this filter was applied to was already deleted or if the
drawable was already removed from the image.

Do not use anymore the @filter object after having deleted it.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter to delete' }
    );

    %invoke = (
	code => <<'CODE'
{
  GimpDrawable *drawable = gimp_drawable_filter_get_drawable (filter);

  if (drawable && gimp_drawable_has_filter (drawable, GIMP_FILTER (filter)))
    {
      gimp_image_undo_push_filter_remove (gimp_item_get_image (GIMP_ITEM (drawable)),
                                          _("Remove filter"), drawable, filter);

      gimp_drawable_filter_abort (filter);
    }
  else
    {
      g_clear_object (&filter);
    }
}
CODE
    );
}

@headers = qw("core/gimpcontainer.h"
              "core/gimpdrawablefilter.h"
              "core/gimpdrawable-filters.h"
              "core/gimpimage-undo-push.h"
              "core/gimpitem.h"
              "gimp-intl.h");

@procs = qw(drawable_filter_id_is_valid
            drawable_filter_get_name
            drawable_filter_get_operation_name
            drawable_filter_get_visible
            drawable_filter_set_visible
            drawable_filter_update_settings
            drawable_filter_get_number_arguments
            drawable_filter_get_argument
            drawable_filter_delete);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Drawable Filter';
$doc_title = 'gimpdrawablefilter';
$doc_short_desc = 'Operations on drawable filters.';
$doc_long_desc = 'Operations on drawable filters: creation, editing.';

1;
