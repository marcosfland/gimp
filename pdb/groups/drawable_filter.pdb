# GIMP - The GNU Image Manipulation Program
# Copyright (C) 1995 Spencer Kimball and Peter Mattis

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


sub drawable_filter_id_is_valid {
    $blurb = 'Returns %TRUE if the drawable filter ID is valid.';

    $help = <<'HELP';
This procedure checks if the given drawable filter ID is valid and refers to an
existing filter.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
        { name => 'filter_id', type => 'int32',
          desc => 'The filter ID to check' }
    );

    @outargs = (
        { name => 'valid', type => 'boolean',
          desc => 'Whether the filter ID is valid' }
    );

    %invoke = (
        code => <<'CODE'
{
  valid = (gimp_drawable_filter_get_by_id (gimp, filter_id) != NULL);
}
CODE
    );
}

sub drawable_filter_delete {
    $blurb = 'Delete a drawable filter.';

    $help = <<'HELP';
This procedure deletes the specified filter. This must not be done if the
drawable whose this filter was applied to was already deleted or if the
drawable was already removed from the image.

Do not use anymore the @filter object after having deleted it.
HELP

    &jehan_pdb_misc('2024', '3.0');

    @inargs = (
	{ name => 'filter', type => 'filter',
	  desc => 'The filter to delete' }
    );

    %invoke = (
	code => <<'CODE'
{
  GimpDrawable *drawable = gimp_drawable_filter_get_drawable (filter);

  if (drawable && gimp_drawable_has_filter (drawable, GIMP_FILTER (filter)))
    {
      gimp_image_undo_push_filter_remove (gimp_item_get_image (GIMP_ITEM (drawable)),
                                          _("Remove filter"), drawable, filter);

      gimp_drawable_filter_abort (filter);
    }
  else
    {
      g_clear_object (&filter);
    }
}
CODE
    );
}

@headers = qw("core/gimpcontainer.h"
              "core/gimpdrawablefilter.h"
              "core/gimpdrawable-filters.h"
              "core/gimpimage-undo-push.h"
              "core/gimpitem.h"
              "gimp-intl.h");

@procs = qw(drawable_filter_id_is_valid
            drawable_filter_delete);

%exports = (app => [@procs], lib => [@procs]);

$desc = 'Drawable Filter';
$doc_title = 'gimpdrawablefilter';
$doc_short_desc = 'Operations on drawable filters.';
$doc_long_desc = 'Operations on drawable filters: creation, editing.';

1;
